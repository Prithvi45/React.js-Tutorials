Components 
1. Function based:
 - pass arguments (props) , and access by props.
 - cannot use state here

2. Class based
 - access args by this
 - use state and setState

* we can pass both  property(variables, values) and method (function) as an argument to a component
* .bind(this, args) :- used to pass arguments  



For styling css 
1. Using Radium
->we can make hover, media queries etc

2. CSS Modules
-> we need to enable css module 
$ npm run eject
we will make changes into configuration file , so use eject method. After ejecting u will find new config adnd script directories into your project
->add below changes in webpack.config.dev.js
 


 *Stateful and  Stateless components
 -function based components are stateless, mostly used for writing logic, make use of it often
 - Class based components are stateful  (use as less as possible), Containers(in our example , App.js is an container)



Components Lifecycle 


* PureComponent comes with built in ShouldComponentUpdate(

* During rendering JSX , we wrap our compenents into a <div> </div>, instead use Higher order components to do same

* npm install --save prop-types  : for validating props, e.g if i pass a string ("10") as props argu instead of integer (10), to catch this type of mistakes 



## Planning a React App
1. Component Tree / Structure : prepare an high level structue
2. Application Data : define and identify states, dynamic data
3. Components vs containers (stateful and stateless)


Component Tree
  App
   |
 Layout
   



Post App:
Public API: http://jsonplaceholder.typicode.com/
Javscript Packages: Axios (https://github.com/Prithvi45/axios)